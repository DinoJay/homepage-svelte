import { basename, join, dirname, resolve } from 'path';
import { $ } from './index.js';
import { mkdirSync, statSync, readdirSync, copyFileSync } from 'fs';
import { fileURLToPath } from 'url';

function mkdirp(dir) {
	try {
		mkdirSync(dir, { recursive: true });
	} catch (e) {
		if (e.code === 'EEXIST') return;
		throw e;
	}
}

function copy(from, to, filter = () => true) {
	if (!filter(basename(from))) return [];

	const files = [];
	const stats = statSync(from);

	if (stats.isDirectory()) {
		readdirSync(from).forEach((file) => {
			files.push(...copy(join(from, file), join(to, file)));
		});
	} else {
		mkdirp(dirname(to));
		copyFileSync(from, to);
		files.push(to);
	}

	return files;
}

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

function copy_assets() {
	copy(resolve(__dirname, '../assets'), '.svelte/assets');
}

function noop() {}

function logger({ verbose }) {
	const log = (msg) => console.log(msg.replace(/^/gm, '  '));

	log.success = (msg) => log($.green(`âœ” ${msg}`));
	log.error = (msg) => log($.bold().red(msg));
	log.warn = (msg) => log($.bold().yellow(msg));

	log.minor = verbose ? (msg) => log($.grey(msg)) : noop;
	log.info = verbose ? log : noop;

	return log;
}

export { copy as a, copy_assets as c, logger as l, mkdirp as m };
//# sourceMappingURL=utils.js.map
