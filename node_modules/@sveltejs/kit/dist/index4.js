import { existsSync, readFileSync } from 'fs';
import { createServer } from 'http';
import { parse, URLSearchParams } from 'url';
import { s as sirv, g as get_body } from './index5.js';
import { resolve, join } from 'path';
import './standard.js';

const mutable = (dir) =>
	sirv(dir, {
		etag: true,
		maxAge: 0
	});

async function start({ port, config }) {
	const app_file = resolve('.svelte/build/optimized/server/app.js');
	const app = await import(app_file);

	const static_handler = existsSync(config.files.assets)
		? mutable(config.files.assets)
		: (_req, _res, next) => next();

	const assets_handler = sirv('.svelte/build/optimized/client', {
		maxAge: 31536000,
		immutable: true
	});

	return new Promise((fulfil) => {
		const server = createServer((req, res) => {
			const parsed = parse(req.url || '');

			assets_handler(req, res, () => {
				static_handler(req, res, async () => {
					const rendered = await app.render(
						{
							method: req.method,
							headers: req.headers,
							path: parsed.pathname,
							body: await get_body(req),
							query: new URLSearchParams(parsed.query || '')
						},
						{
							paths: {
								base: '',
								assets: '/.'
							},
							get_stack: (error) => error.stack, // TODO should this return a sourcemapped stacktrace?
							get_static_file: (file) => readFileSync(join(config.files.assets, file))
						}
					);

					if (rendered) {
						res.writeHead(rendered.status, rendered.headers);
						res.end(rendered.body);
					} else {
						res.statusCode = 404;
						res.end('Not found');
					}
				});
			});
		});

		server.listen(port, () => {
			fulfil(server);
		});

		return server;
	});
}

export { start };
//# sourceMappingURL=index4.js.map
