import { existsSync } from 'fs';
import sade from 'sade';
import { $, l as load_config } from './index.js';
import 'url';
import 'path';

var version = "1.0.0-next.34";

async function get_config() {
	try {
		return await load_config();
	} catch (error) {
		let message = error.message;

		if (error.code === 'MODULE_NOT_FOUND') {
			if (existsSync('svelte.config.js')) {
				// TODO this is temporary, for the benefit of early adopters
				message =
					'You must rename svelte.config.js to svelte.config.cjs, and snowpack.config.js to snowpack.config.cjs';
			} else {
				message = 'Missing svelte.config.cjs';
			}
		} else if (error.name === 'SyntaxError') {
			message = 'Malformed svelte.config.cjs';
		}

		console.error($.bold().red(message));
		console.error($.grey(error.stack));
		process.exit(1);
	}
}

function handle_error(error) {
	console.log($.bold().red(`> ${error.message}`));
	console.log($.gray(error.stack));
	process.exit(1);
}

async function launch(port) {
	const { exec } = await import('child_process');
	exec(`${process.platform == 'win32' ? 'start' : 'open'} http://localhost:${port}`);
}

const prog = sade('svelte').version(version);

prog
	.command('dev')
	.describe('Start a development server')
	.option('-p, --port', 'Port', 3000)
	.option('-o, --open', 'Open a browser tab', false)
	.action(async ({ port, open }) => {
		process.env.NODE_ENV = 'development';
		const config = await get_config();

		const { dev } = await import('./index2.js');

		try {
			const watcher = await dev({ port, config });

			watcher.on('stdout', (data) => {
				process.stdout.write(data);
			});

			watcher.on('stderr', (data) => {
				process.stderr.write(data);
			});

			console.log($.bold().cyan(`> Listening on http://localhost:${watcher.port}`));
			if (open) launch(watcher.port);
		} catch (error) {
			handle_error(error);
		}
	});

prog
	.command('build')
	.describe('Create a production build of your app')
	.action(async () => {
		process.env.NODE_ENV = 'production';
		const config = await get_config();

		const { build } = await import('./index3.js');

		try {
			await build(config);
		} catch (error) {
			handle_error(error);
		}
	});

prog
	.command('start')
	.describe('Serve an already-built app')
	.option('-p, --port', 'Port', 3000)
	.option('-o, --open', 'Open a browser tab', false)
	.action(async ({ port, open }) => {
		process.env.NODE_ENV = 'production';
		const config = await get_config();

		const { start } = await import('./index4.js');

		try {
			await start({ port, config });

			console.log($.bold().cyan(`> Listening on http://localhost:${port}`));
			if (open) if (open) launch(port);
		} catch (error) {
			handle_error(error);
		}
	});

prog
	.command('adapt')
	.describe('Customise your production build for different platforms')
	.option('--verbose', 'Log more stuff', false)
	.action(async ({ verbose }) => {
		process.env.NODE_ENV = 'production';
		const config = await get_config();

		const { adapt } = await import('./index6.js');

		try {
			await adapt(config, { verbose });
		} catch (error) {
			handle_error(error);
		}
	});

prog.parse(process.argv, { unknown: (arg) => `Unknown option: ${arg}` });
//# sourceMappingURL=cli.js.map
